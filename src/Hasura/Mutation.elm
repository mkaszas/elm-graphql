-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Mutation exposing (DeleteFollowConnectionRequiredArguments, DeleteUserRequiredArguments, InsertFollowConnectionOptionalArguments, InsertFollowConnectionRequiredArguments, InsertUserOptionalArguments, InsertUserRequiredArguments, UpdateFollowConnectionOptionalArguments, UpdateFollowConnectionRequiredArguments, UpdateUserOptionalArguments, UpdateUserRequiredArguments, delete_follow_connection, delete_user, insert_follow_connection, insert_user, update_follow_connection, update_user)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode exposing (Decoder)


type alias DeleteFollowConnectionRequiredArguments =
    { where_ : Hasura.InputObject.Follow_connection_bool_exp }


{-| delete data from the table: "follow\_connection"

  - where\_ - filter the rows which have to be deleted

-}
delete_follow_connection : DeleteFollowConnectionRequiredArguments -> SelectionSet decodesTo Hasura.Object.Follow_connection_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
delete_follow_connection requiredArgs object_ =
    Object.selectionForCompositeField "delete_follow_connection" [ Argument.required "where" requiredArgs.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ] object_ (identity >> Decode.nullable)


type alias DeleteUserRequiredArguments =
    { where_ : Hasura.InputObject.User_bool_exp }


{-| delete data from the table: "user"

  - where\_ - filter the rows which have to be deleted

-}
delete_user : DeleteUserRequiredArguments -> SelectionSet decodesTo Hasura.Object.User_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
delete_user requiredArgs object_ =
    Object.selectionForCompositeField "delete_user" [ Argument.required "where" requiredArgs.where_ Hasura.InputObject.encodeUser_bool_exp ] object_ (identity >> Decode.nullable)


type alias InsertFollowConnectionOptionalArguments =
    { on_conflict : OptionalArgument Hasura.InputObject.Follow_connection_on_conflict }


type alias InsertFollowConnectionRequiredArguments =
    { objects : List Hasura.InputObject.Follow_connection_insert_input }


{-| insert data into the table: "follow\_connection"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_follow_connection : (InsertFollowConnectionOptionalArguments -> InsertFollowConnectionOptionalArguments) -> InsertFollowConnectionRequiredArguments -> SelectionSet decodesTo Hasura.Object.Follow_connection_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
insert_follow_connection fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { on_conflict = Absent }

        optionalArgs =
            [ Argument.optional "on_conflict" filledInOptionals.on_conflict Hasura.InputObject.encodeFollow_connection_on_conflict ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "insert_follow_connection" (optionalArgs ++ [ Argument.required "objects" requiredArgs.objects (Hasura.InputObject.encodeFollow_connection_insert_input |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias InsertUserOptionalArguments =
    { on_conflict : OptionalArgument Hasura.InputObject.User_on_conflict }


type alias InsertUserRequiredArguments =
    { objects : List Hasura.InputObject.User_insert_input }


{-| insert data into the table: "user"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_user : (InsertUserOptionalArguments -> InsertUserOptionalArguments) -> InsertUserRequiredArguments -> SelectionSet decodesTo Hasura.Object.User_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
insert_user fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { on_conflict = Absent }

        optionalArgs =
            [ Argument.optional "on_conflict" filledInOptionals.on_conflict Hasura.InputObject.encodeUser_on_conflict ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "insert_user" (optionalArgs ++ [ Argument.required "objects" requiredArgs.objects (Hasura.InputObject.encodeUser_insert_input |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias UpdateFollowConnectionOptionalArguments =
    { set_ : OptionalArgument Hasura.InputObject.Follow_connection_set_input }


type alias UpdateFollowConnectionRequiredArguments =
    { where_ : Hasura.InputObject.Follow_connection_bool_exp }


{-| update data of the table: "follow\_connection"

  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_follow_connection : (UpdateFollowConnectionOptionalArguments -> UpdateFollowConnectionOptionalArguments) -> UpdateFollowConnectionRequiredArguments -> SelectionSet decodesTo Hasura.Object.Follow_connection_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
update_follow_connection fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { set_ = Absent }

        optionalArgs =
            [ Argument.optional "_set" filledInOptionals.set_ Hasura.InputObject.encodeFollow_connection_set_input ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_follow_connection" (optionalArgs ++ [ Argument.required "where" requiredArgs.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]) object_ (identity >> Decode.nullable)


type alias UpdateUserOptionalArguments =
    { inc_ : OptionalArgument Hasura.InputObject.User_inc_input
    , set_ : OptionalArgument Hasura.InputObject.User_set_input
    }


type alias UpdateUserRequiredArguments =
    { where_ : Hasura.InputObject.User_bool_exp }


{-| update data of the table: "user"

  - inc\_ - increments the integer columns with given value of the filtered values
  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_user : (UpdateUserOptionalArguments -> UpdateUserOptionalArguments) -> UpdateUserRequiredArguments -> SelectionSet decodesTo Hasura.Object.User_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
update_user fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { inc_ = Absent, set_ = Absent }

        optionalArgs =
            [ Argument.optional "_inc" filledInOptionals.inc_ Hasura.InputObject.encodeUser_inc_input, Argument.optional "_set" filledInOptionals.set_ Hasura.InputObject.encodeUser_set_input ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_user" (optionalArgs ++ [ Argument.required "where" requiredArgs.where_ Hasura.InputObject.encodeUser_bool_exp ]) object_ (identity >> Decode.nullable)
