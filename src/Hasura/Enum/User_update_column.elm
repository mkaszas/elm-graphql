-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.User_update_column exposing (User_update_column(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "user"

  - Age - column name
  - Id - column name
  - Inviter\_id - column name
  - Name - column name

-}
type User_update_column
    = Age
    | Id
    | Inviter_id
    | Name


list : List User_update_column
list =
    [ Age, Id, Inviter_id, Name ]


decoder : Decoder User_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "age" ->
                        Decode.succeed Age

                    "id" ->
                        Decode.succeed Id

                    "inviter_id" ->
                        Decode.succeed Inviter_id

                    "name" ->
                        Decode.succeed Name

                    _ ->
                        Decode.fail ("Invalid User_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : User_update_column -> String
toString enum =
    case enum of
        Age ->
            "age"

        Id ->
            "id"

        Inviter_id ->
            "inviter_id"

        Name ->
            "name"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe User_update_column
fromString enumString =
    case enumString of
        "age" ->
            Just Age

        "id" ->
            Just Id

        "inviter_id" ->
            Just Inviter_id

        "name" ->
            Just Name

        _ ->
            Nothing
