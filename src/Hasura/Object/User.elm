-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Object.User exposing (FollowedUsersAggregateOptionalArguments, FollowedUsersOptionalArguments, FollowersAggregateOptionalArguments, FollowersOptionalArguments, age, followed_users, followed_users_aggregate, followers, followers_aggregate, id, inviter, inviter_id, name)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Follow_connection_select_column
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode


age : SelectionSet (Maybe Int) Hasura.Object.User
age =
    Object.selectionForField "(Maybe Int)" "age" [] (Decode.int |> Decode.nullable)


type alias FollowedUsersOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
followed_users : (FollowedUsersOptionalArguments -> FollowedUsersOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection -> SelectionSet (List decodesTo) Hasura.Object.User
followed_users fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followed_users" optionalArgs object_ (identity >> Decode.list)


type alias FollowedUsersAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| An aggregated array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
followed_users_aggregate : (FollowedUsersAggregateOptionalArguments -> FollowedUsersAggregateOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection_aggregate -> SelectionSet decodesTo Hasura.Object.User
followed_users_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followed_users_aggregate" optionalArgs object_ identity


type alias FollowersOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
followers : (FollowersOptionalArguments -> FollowersOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection -> SelectionSet (List decodesTo) Hasura.Object.User
followers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followers" optionalArgs object_ (identity >> Decode.list)


type alias FollowersAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| An aggregated array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
followers_aggregate : (FollowersAggregateOptionalArguments -> FollowersAggregateOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection_aggregate -> SelectionSet decodesTo Hasura.Object.User
followers_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followers_aggregate" optionalArgs object_ identity


id : SelectionSet Hasura.ScalarCodecs.Uuid Hasura.Object.User
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (Hasura.ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


{-| An object relationship
-}
inviter : SelectionSet decodesTo Hasura.Object.User -> SelectionSet (Maybe decodesTo) Hasura.Object.User
inviter object_ =
    Object.selectionForCompositeField "inviter" [] object_ (identity >> Decode.nullable)


inviter_id : SelectionSet (Maybe Hasura.ScalarCodecs.Uuid) Hasura.Object.User
inviter_id =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "inviter_id" [] (Hasura.ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


name : SelectionSet String Hasura.Object.User
name =
    Object.selectionForField "String" "name" [] Decode.string
