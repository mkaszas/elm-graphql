-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Query exposing (FollowConnectionAggregateOptionalArguments, FollowConnectionByPkRequiredArguments, FollowConnectionOptionalArguments, UserAggregateOptionalArguments, UserByPkRequiredArguments, UserOptionalArguments, follow_connection, follow_connection_aggregate, follow_connection_by_pk, user, user_aggregate, user_by_pk)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Follow_connection_select_column
import Hasura.Enum.User_select_column
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode exposing (Decoder)


type alias FollowConnectionOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| fetch data from the table: "follow\_connection"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
follow_connection : (FollowConnectionOptionalArguments -> FollowConnectionOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection -> SelectionSet (List decodesTo) RootQuery
follow_connection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "follow_connection" optionalArgs object_ (identity >> Decode.list)


type alias FollowConnectionAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follow_connection_select_column.Follow_connection_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follow_connection_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follow_connection_bool_exp
    }


{-| fetch aggregated fields from the table: "follow\_connection"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
follow_connection_aggregate : (FollowConnectionAggregateOptionalArguments -> FollowConnectionAggregateOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follow_connection_aggregate -> SelectionSet decodesTo RootQuery
follow_connection_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follow_connection_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollow_connection_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollow_connection_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "follow_connection_aggregate" optionalArgs object_ identity


type alias FollowConnectionByPkRequiredArguments =
    { id : Hasura.ScalarCodecs.Uuid }


{-| fetch data from the table: "follow\_connection" using primary key columns
-}
follow_connection_by_pk : FollowConnectionByPkRequiredArguments -> SelectionSet decodesTo Hasura.Object.Follow_connection -> SelectionSet (Maybe decodesTo) RootQuery
follow_connection_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "follow_connection_by_pk" [ Argument.required "id" requiredArgs.id (Hasura.ScalarCodecs.codecs |> Hasura.Scalar.unwrapEncoder .codecUuid) ] object_ (identity >> Decode.nullable)


type alias UserOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.User_select_column.User_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.User_order_by)
    , where_ : OptionalArgument Hasura.InputObject.User_bool_exp
    }


{-| fetch data from the table: "user"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Hasura.Object.User -> SelectionSet (List decodesTo) RootQuery
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.User_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeUser_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeUser_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user" optionalArgs object_ (identity >> Decode.list)


type alias UserAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.User_select_column.User_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.User_order_by)
    , where_ : OptionalArgument Hasura.InputObject.User_bool_exp
    }


{-| fetch aggregated fields from the table: "user"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
user_aggregate : (UserAggregateOptionalArguments -> UserAggregateOptionalArguments) -> SelectionSet decodesTo Hasura.Object.User_aggregate -> SelectionSet decodesTo RootQuery
user_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.User_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeUser_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeUser_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user_aggregate" optionalArgs object_ identity


type alias UserByPkRequiredArguments =
    { id : Hasura.ScalarCodecs.Uuid }


{-| fetch data from the table: "user" using primary key columns
-}
user_by_pk : UserByPkRequiredArguments -> SelectionSet decodesTo Hasura.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "user_by_pk" [ Argument.required "id" requiredArgs.id (Hasura.ScalarCodecs.codecs |> Hasura.Scalar.unwrapEncoder .codecUuid) ] object_ (identity >> Decode.nullable)
